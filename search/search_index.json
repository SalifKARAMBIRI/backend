{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Protocolo HTTP e Comunica\u00e7\u00e3o Web <p>O HyperText Transfer Protocol (HTTP) \u00e9 a espinha dorsal da World Wide Web. Ele define como as mensagens s\u00e3o formatadas e transmitidas, e como servidores e navegadores respondem a diferentes comandos. O HTTP usa um modelo cliente-servidor, onde o navegador \u00e9 o cliente e a aplica\u00e7\u00e3o no servidor web \u00e9 o servidor.</p> <p>O diagrama acima ilustra o processo de requisi\u00e7\u00e3o e resposta entre cliente e servidor, fundamental para o funcionamento do HTTP.</p> <p>Verbos HTTP (GET, POST, PUT, DELETE, etc.), URLs e URIs s\u00e3o elementos cruciais para especificar a\u00e7\u00f5es e recursos na comunica\u00e7\u00e3o web.</p> <p>A arquitetura MVC (Model-View-Controller) \u00e9 frequentemente usada em aplica\u00e7\u00f5es web para organizar a l\u00f3gica, apresenta\u00e7\u00e3o e intera\u00e7\u00e3o com o usu\u00e1rio.</p> <p>O m\u00e9todo GET \u00e9 usado para solicitar dados do servidor.</p> <p>O m\u00e9todo POST \u00e9 usado para enviar dados ao servidor para processamento.</p> <p>Outros protocolos importantes na web incluem HTTPS (HTTP seguro), FTP (transfer\u00eancia de arquivos) e WebSocket (comunica\u00e7\u00e3o bidirecional em tempo real).</p> Como a World Wide Web Funciona Entendendo a Web <p>A World Wide Web (WWW) \u00e9 um sistema de documentos interligados acess\u00edveis via Internet. Esses documentos s\u00e3o formatados em HTML (HyperText Markup Language) e podem ser visualizados por navegadores web. A comunica\u00e7\u00e3o na web \u00e9 feita atrav\u00e9s do protocolo HTTP (HyperText Transfer Protocol).</p> <p>Quando um usu\u00e1rio digita um endere\u00e7o web (URL) em um navegador, este envia uma solicita\u00e7\u00e3o HTTP ao servidor onde o site est\u00e1 hospedado. O servidor responde com o c\u00f3digo HTML da p\u00e1gina solicitada, que o navegador renderiza para o usu\u00e1rio. Esse processo permite que informa\u00e7\u00f5es e servi\u00e7os sejam acessados de maneira r\u00e1pida e eficiente.</p> <p># Estrutura do Nosso Projeto</p> /src /controllers - userController.ts - productController.ts /models - userModel.ts - productModel.ts /views - userView.ts - productView.ts /routes - userRoutes.ts - productRoutes.ts /services - userService.ts - productService.ts /config - database.ts - server.ts /middlewares - authMiddleware.ts /utils - helpers.ts - app.ts - server.ts Cronograma de Aulas Data Aula 06/08 An\u00e1lise de Requisitos e Viabilidade 13/08 GitFlow e Conventional Commits - Boas Pr\u00e1ticas de Desenvolvimento e Documenta\u00e7\u00e3o (Cria\u00e7\u00e3o do reposit\u00f3rio individual) 0,5 pontos 20/08 Virtualiza\u00e7\u00e3o, node e Docker (Cria\u00e7\u00e3o de banco de dados postgres com docker compose e ambiente node) 27/08 Modelagem de banco de dados e Models (Arquiteturas de Softwares em MVC e Padr\u00f5es de Projeto) 03/09 Rotas e Controllers (Continua\u00e7\u00e3o do MVC) 10/09 TechWeek 17/09 Queries SQLs avan\u00e7adas em banco de dados 24/09 Teste SQL Avan\u00e7ado 2,5 pontos 01/10 Feriado 08/10 Helpers e Camadas Auxiliares do MVC 15/10 Avalia\u00e7\u00e3o Multidisciplinar - 1 ponto 22/10 Filas com RabbitMQ e controle ass\u00edncrono de requisi\u00e7\u00f5es 29/10 TDD e testes unit\u00e1rios 05/11 Deploy com render (web Service + PostgreSQL) 12/11 Autentica\u00e7\u00e3o com criptografia de usu\u00e1rios 19/11 Revis\u00e3o e direcionamento de projetos 26/11 Avalia\u00e7\u00e3o Semestral - Prova (2 pontos) + Projeto (4 pontos)"},{"location":"10_filas_rabbitmq/","title":"Filas com RabbitMQ e Controle Ass\u00edncrono de Requisi\u00e7\u00f5es","text":""},{"location":"11_tdd_testes_unitarios/","title":"TDD e Testes Unit\u00e1rios","text":""},{"location":"12_deploy_render/","title":"Deploy com Render (Web Service + PostgreSQL)","text":""},{"location":"13_autenticacao_criptografia_usuarios/","title":"Autentica\u00e7\u00e3o com Criptografia de Usu\u00e1rios","text":""},{"location":"14_revisao_direcionamento_projetos/","title":"Revis\u00e3o e Direcionamento de Projetos","text":""},{"location":"15_avaliacao_semestral/","title":"Avalia\u00e7\u00e3o Semestral","text":""},{"location":"15_avaliacao_semestral/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Prova (2 pontos) + Projeto (4 pontos)</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/","title":"An\u00e1lise de Requisitos e Viabilidade: Uma Aula Avan\u00e7ada com Desafio Pr\u00e1tico","text":""},{"location":"1_analise_requisitos_viabilidade/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A An\u00e1lise de Requisitos e Viabilidade \u00e9 essencial para o desenvolvimento de qualquer software, incluindo interfaces de usu\u00e1rio (frontend). Ela garante que o produto final atenda \u00e0s necessidades dos usu\u00e1rios e seja vi\u00e1vel dentro das restri\u00e7\u00f5es do projeto. Nesta aula, exploraremos os conceitos e t\u00e9cnicas da An\u00e1lise de Requisitos e Viabilidade aplicados ao desenvolvimento frontend, culminando em um desafio pr\u00e1tico para consolidar seu aprendizado.</p> <p></p>"},{"location":"1_analise_requisitos_viabilidade/#objetivos-de-aprendizagem","title":"Objetivos de Aprendizagem","text":"<p>Ao final desta aula, voc\u00ea ser\u00e1 capaz de:</p> <ul> <li>Compreender a import\u00e2ncia da An\u00e1lise de Requisitos e Viabilidade no desenvolvimento frontend.</li> <li>Identificar e documentar requisitos funcionais, n\u00e3o funcionais e de usabilidade.</li> <li>Realizar an\u00e1lises de viabilidade t\u00e9cnica e de design para interfaces de usu\u00e1rio.</li> <li>Aplicar t\u00e9cnicas de elicita\u00e7\u00e3o e prioriza\u00e7\u00e3o de requisitos em projetos frontend.</li> <li>Utilizar ferramentas e modelos para auxiliar na An\u00e1lise de Requisitos e Viabilidade em frontend.</li> </ul> <p></p>"},{"location":"1_analise_requisitos_viabilidade/#conteudo-da-aula","title":"Conte\u00fado da Aula","text":""},{"location":"1_analise_requisitos_viabilidade/#1-introducao-a-analise-de-requisitos-em-backend","title":"1. Introdu\u00e7\u00e3o \u00e0 An\u00e1lise de Requisitos em Backend","text":"<p>A An\u00e1lise de Requisitos em Backend \u00e9 o alicerce para o desenvolvimento de sistemas robustos e eficientes. Ela envolve a identifica\u00e7\u00e3o, documenta\u00e7\u00e3o e valida\u00e7\u00e3o das necessidades e expectativas dos usu\u00e1rios e stakeholders em rela\u00e7\u00e3o \u00e0 l\u00f3gica, aos dados e \u00e0s funcionalidades internas do sistema.</p>"},{"location":"1_analise_requisitos_viabilidade/#definicao-e-importancia","title":"Defini\u00e7\u00e3o e Import\u00e2ncia","text":"<p>A An\u00e1lise de Requisitos em Backend \u00e9 um processo fundamental que visa entender e definir as regras de neg\u00f3cio, os fluxos de dados e as opera\u00e7\u00f5es que o sistema deve realizar em segundo plano. Ela serve como um guia para o desenvolvimento do backend, garantindo que o sistema:</p> <ul> <li>Funcional: Execute as opera\u00e7\u00f5es necess\u00e1rias para atender \u00e0s necessidades dos usu\u00e1rios e do neg\u00f3cio.</li> <li>Confi\u00e1vel: Processe e armazene dados de forma segura e consistente.</li> <li>Escal\u00e1vel: Suporte o crescimento do n\u00famero de usu\u00e1rios e da quantidade de dados sem comprometer o desempenho.</li> <li>Manuten\u00edvel: Seja f\u00e1cil de atualizar e modificar para atender a novas demandas.</li> <li>Integr\u00e1vel: Comunique-se de forma eficiente com outros sistemas e componentes.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tipos-de-requisitos","title":"Tipos de Requisitos","text":"<p>Os requisitos em backend podem ser classificados em tr\u00eas categorias principais:</p>"},{"location":"1_analise_requisitos_viabilidade/#requisitos-funcionais","title":"Requisitos Funcionais","text":"<p>Descrevem as funcionalidades internas que o sistema deve oferecer para suportar as intera\u00e7\u00f5es do usu\u00e1rio e as regras de neg\u00f3cio. S\u00e3o a\u00e7\u00f5es que o sistema deve realizar em segundo plano, como:</p> <ul> <li>Processamento de dados: Calcular valores, validar informa\u00e7\u00f5es, transformar dados.</li> <li>Gerenciamento de dados: Armazenar, recuperar, atualizar e excluir dados em bancos de dados.</li> <li>Comunica\u00e7\u00e3o: Trocar informa\u00e7\u00f5es com outros sistemas ou componentes atrav\u00e9s de APIs.</li> <li>Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o: Controlar o acesso aos recursos do sistema.</li> <li>L\u00f3gica de neg\u00f3cio: Implementar as regras e pol\u00edticas que regem o funcionamento do sistema.</li> </ul> <p>Exemplos de requisitos funcionais:</p> <ul> <li>\"O sistema deve calcular o valor total de um pedido com base nos produtos e quantidades.\"</li> <li>\"O sistema deve validar o formato de um endere\u00e7o de e-mail antes de permitir o cadastro.\"</li> <li>\"O sistema deve gerar um relat\u00f3rio mensal de vendas.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#requisitos-nao-funcionais","title":"Requisitos N\u00e3o Funcionais","text":"<p>Abrangem aspectos que n\u00e3o est\u00e3o diretamente relacionados \u00e0s funcionalidades do backend, mas que s\u00e3o essenciais para a qualidade e o desempenho do sistema. Incluem caracter\u00edsticas como:</p> <ul> <li>Desempenho: Tempo de resposta das opera\u00e7\u00f5es, capacidade de processamento de dados.</li> <li>Seguran\u00e7a: Prote\u00e7\u00e3o contra ataques cibern\u00e9ticos, criptografia de dados sens\u00edveis.</li> <li>Escalabilidade: Capacidade de lidar com um aumento no n\u00famero de usu\u00e1rios e na quantidade de dados.</li> <li>Disponibilidade: Tempo em que o sistema est\u00e1 dispon\u00edvel para uso.</li> <li>Manutenibilidade: Facilidade de atualizar e modificar o c\u00f3digo do sistema.</li> </ul> <p>Exemplos de requisitos n\u00e3o funcionais:</p> <ul> <li>\"O tempo de resposta de cada opera\u00e7\u00e3o n\u00e3o deve exceder 1 segundo.\"</li> <li>\"O sistema deve ser capaz de processar 10.000 transa\u00e7\u00f5es por minuto.\"</li> <li>\"O sistema deve estar dispon\u00edvel 24 horas por dia, 7 dias por semana.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"<p>Definem as pol\u00edticas e restri\u00e7\u00f5es que regem o funcionamento do sistema e como ele deve responder a diferentes eventos. S\u00e3o derivadas das necessidades do neg\u00f3cio e podem ser expressas em linguagem natural ou em uma linguagem de modelagem.</p> <p>Exemplos de regras de neg\u00f3cio:</p> <ul> <li>\"Um cliente s\u00f3 pode ter um pedido em aberto por vez.\"</li> <li>\"O desconto m\u00e1ximo permitido em um produto \u00e9 de 30%.\"</li> <li>\"Um usu\u00e1rio s\u00f3 pode acessar determinadas \u00e1reas do sistema se tiver permiss\u00e3o de administrador.\"</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tecnicas-de-elicitacao","title":"T\u00e9cnicas de Elicita\u00e7\u00e3o","text":"<p>A elicita\u00e7\u00e3o de requisitos em backend envolve a coleta de informa\u00e7\u00f5es de diversas fontes, como:</p> <ul> <li>Stakeholders: Entrevistas com usu\u00e1rios, gerentes de produto, especialistas de dom\u00ednio e outros envolvidos no projeto.</li> <li>Documenta\u00e7\u00e3o existente: An\u00e1lise de documentos como manuais de usu\u00e1rio, especifica\u00e7\u00f5es t\u00e9cnicas e relat\u00f3rios de requisitos de sistemas similares.</li> <li>An\u00e1lise de sistemas legados: Estudo de sistemas existentes que ser\u00e3o substitu\u00eddos ou integrados ao novo sistema.</li> <li>Workshops e brainstorming: Sess\u00f5es colaborativas para gerar ideias e identificar requisitos.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#documentacao-de-requisitos","title":"Documenta\u00e7\u00e3o de Requisitos","text":"<p>A documenta\u00e7\u00e3o de requisitos em backend deve ser clara, concisa e organizada. Algumas formas comuns de documentar requisitos em backend s\u00e3o:</p> <ul> <li>Casos de uso: Descrevem as intera\u00e7\u00f5es entre os atores (usu\u00e1rios, sistemas externos) e o sistema para alcan\u00e7ar um objetivo espec\u00edfico.</li> <li>Hist\u00f3rias de usu\u00e1rio: Descri\u00e7\u00f5es concisas e em linguagem natural das funcionalidades desejadas do ponto de vista do usu\u00e1rio.</li> <li>Diagramas de sequ\u00eancia: Representa\u00e7\u00f5es visuais da sequ\u00eancia de mensagens trocadas entre os objetos do sistema.</li> <li>Diagramas de classe: Representa\u00e7\u00f5es visuais da estrutura e das rela\u00e7\u00f5es entre as classes do sistema.</li> <li>Especifica\u00e7\u00f5es de API: Descri\u00e7\u00f5es detalhadas das interfaces de programa\u00e7\u00e3o de aplicativos (APIs) que o sistema oferece.</li> </ul> <p>Ao dominar a An\u00e1lise de Requisitos em Backend, voc\u00ea estar\u00e1 apto a construir sistemas robustos, eficientes e que atendam \u00e0s necessidades do neg\u00f3cio e dos usu\u00e1rios de forma eficaz.</p>"},{"location":"1_analise_requisitos_viabilidade/#2-analise-de-viabilidade-em-backend","title":"2. An\u00e1lise de Viabilidade em Backend","text":"<p>A An\u00e1lise de Viabilidade em Backend \u00e9 o processo de avaliar se os requisitos identificados na etapa anterior s\u00e3o realistas e podem ser implementados com sucesso, considerando as restri\u00e7\u00f5es t\u00e9cnicas, de tempo, de custo e de recursos dispon\u00edveis.</p>"},{"location":"1_analise_requisitos_viabilidade/#viabilidade-tecnica","title":"Viabilidade T\u00e9cnica","text":"<p>A viabilidade t\u00e9cnica avalia se os requisitos podem ser implementados com as tecnologias, ferramentas e conhecimentos dispon\u00edveis. \u00c9 importante considerar:</p> <ul> <li>Tecnologias: As linguagens de programa\u00e7\u00e3o, frameworks, bancos de dados e outras tecnologias escolhidas para o projeto s\u00e3o adequadas para atender aos requisitos? Elas oferecem o desempenho, a seguran\u00e7a e a escalabilidade necess\u00e1rios?</li> <li>Ferramentas: As ferramentas de desenvolvimento, como IDEs, depuradores e ferramentas de teste, s\u00e3o suficientes para construir e manter o sistema?</li> <li>Equipe: A equipe de desenvolvimento possui as habilidades e a experi\u00eancia necess\u00e1rias para trabalhar com as tecnologias escolhidas e implementar os requisitos?</li> <li>Infraestrutura: A infraestrutura de hardware e software dispon\u00edvel (servidores, redes, sistemas operacionais) \u00e9 capaz de suportar o sistema em produ\u00e7\u00e3o?</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#viabilidade-de-design","title":"Viabilidade de Design","text":"<p>A viabilidade de design avalia se os requisitos podem ser implementados de forma eficiente, escal\u00e1vel e manuten\u00edvel. \u00c9 importante considerar:</p> <ul> <li>Arquitetura: A arquitetura do sistema (monol\u00edtica, microsservi\u00e7os, etc.) \u00e9 adequada para atender aos requisitos de desempenho, escalabilidade e flexibilidade?</li> <li>Design de dados: O modelo de dados escolhido (relacional, NoSQL, etc.) \u00e9 adequado para armazenar e recuperar os dados do sistema de forma eficiente?</li> <li>Design de c\u00f3digo: O c\u00f3digo do sistema segue boas pr\u00e1ticas de programa\u00e7\u00e3o, como modularidade, coes\u00e3o e baixo acoplamento? Isso facilita a manuten\u00e7\u00e3o e evolu\u00e7\u00e3o do sistema.</li> <li>Padr\u00f5es de projeto: O uso de padr\u00f5es de projeto estabelecidos pode ajudar a resolver problemas comuns de design e melhorar a qualidade do c\u00f3digo.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#ferramentas-e-metodos","title":"Ferramentas e M\u00e9todos","text":"<p>Existem diversas ferramentas e m\u00e9todos que podem auxiliar na an\u00e1lise de viabilidade em backend:</p> <ul> <li>Provas de conceito (PoCs): Implementa\u00e7\u00f5es em pequena escala de funcionalidades cr\u00edticas para validar a viabilidade t\u00e9cnica e testar diferentes abordagens.</li> <li>An\u00e1lise de riscos: Identifica\u00e7\u00e3o e avalia\u00e7\u00e3o dos riscos t\u00e9cnicos que podem impactar o projeto, como a falta de experi\u00eancia da equipe com uma determinada tecnologia ou a depend\u00eancia de componentes externos.</li> <li>Estimativas de esfor\u00e7o: C\u00e1lculo do tempo e dos recursos necess\u00e1rios para implementar os requisitos, considerando a complexidade das tarefas e a experi\u00eancia da equipe.</li> <li>An\u00e1lise de custos: Estimativa dos custos de desenvolvimento, incluindo licen\u00e7as de software, hardware, infraestrutura e sal\u00e1rios da equipe.</li> </ul> <p>Ao realizar uma an\u00e1lise de viabilidade completa, voc\u00ea pode tomar decis\u00f5es informadas sobre a implementa\u00e7\u00e3o dos requisitos, identificar e mitigar riscos e garantir que o projeto seja entregue com sucesso, dentro do prazo e do or\u00e7amento.</p>"},{"location":"1_analise_requisitos_viabilidade/#3-priorizacao-de-requisitos-em-backend","title":"3. Prioriza\u00e7\u00e3o de Requisitos em Backend","text":"<p>A Prioriza\u00e7\u00e3o de Requisitos em Backend \u00e9 o processo de organizar e classificar os requisitos identificados de acordo com sua import\u00e2ncia e impacto no projeto. Essa etapa \u00e9 crucial para garantir que os recursos sejam alocados de forma eficiente e que as funcionalidades mais importantes sejam desenvolvidas e entregues primeiro.</p>"},{"location":"1_analise_requisitos_viabilidade/#importancia-da-priorizacao","title":"Import\u00e2ncia da Prioriza\u00e7\u00e3o","text":"<p>A prioriza\u00e7\u00e3o de requisitos oferece diversos benef\u00edcios para o projeto:</p> <ul> <li>Foco: Permite que a equipe de desenvolvimento se concentre nas funcionalidades mais importantes, evitando dispers\u00e3o de esfor\u00e7os.</li> <li>Gerenciamento de expectativas: Ajuda a alinhar as expectativas dos stakeholders em rela\u00e7\u00e3o ao que ser\u00e1 entregue em cada fase do projeto.</li> <li>Tomada de decis\u00f5es: Facilita a tomada de decis\u00f5es sobre quais requisitos devem ser implementados primeiro, caso haja restri\u00e7\u00f5es de tempo ou recursos.</li> <li>Flexibilidade: Permite que o projeto se adapte a mudan\u00e7as nas prioridades do neg\u00f3cio ou nas necessidades dos usu\u00e1rios.</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#criterios-de-priorizacao","title":"Crit\u00e9rios de Prioriza\u00e7\u00e3o","text":"<p>Existem diversos crit\u00e9rios que podem ser utilizados para priorizar os requisitos em backend:</p> <ul> <li>Valor de neg\u00f3cio: Qual o impacto do requisito no sucesso do neg\u00f3cio? Ele gera receita, reduz custos, melhora a efici\u00eancia ou aumenta a satisfa\u00e7\u00e3o do cliente?</li> <li>Urg\u00eancia: Qual a necessidade de implementar o requisito em curto prazo? Ele \u00e9 essencial para o lan\u00e7amento do produto ou para atender a uma demanda urgente do mercado?</li> <li>Risco: Qual o risco de n\u00e3o implementar o requisito? Ele pode causar problemas de seguran\u00e7a, perda de dados, insatisfa\u00e7\u00e3o do cliente ou impacto negativo na imagem da empresa?</li> <li>Custo: Qual o custo de implementar o requisito? Ele requer recursos adicionais, como tempo, dinheiro ou m\u00e3o de obra especializada?</li> <li>Depend\u00eancias: O requisito depende de outros requisitos para ser implementado? Ele \u00e9 um pr\u00e9-requisito para outras funcionalidades?</li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#tecnicas-de-priorizacao","title":"T\u00e9cnicas de Prioriza\u00e7\u00e3o","text":"<p>Existem diversas t\u00e9cnicas que podem ser utilizadas para priorizar os requisitos em backend:</p> <ul> <li>MoSCoW: Classifica os requisitos em quatro categorias:<ul> <li>Must Have: Requisitos essenciais para o sucesso do projeto.</li> <li>Should Have: Requisitos importantes, mas n\u00e3o essenciais.</li> <li>Could Have: Requisitos desej\u00e1veis, mas que podem ser adiados.</li> <li>Won't Have: Requisitos que n\u00e3o ser\u00e3o implementados nesta vers\u00e3o do projeto.</li> </ul> </li> <li>Kano: Analisa a satisfa\u00e7\u00e3o do cliente em rela\u00e7\u00e3o aos requisitos, classificando-os em cinco categorias:<ul> <li>Obrigat\u00f3rios: Requisitos b\u00e1sicos que, se n\u00e3o forem atendidos, causam insatisfa\u00e7\u00e3o.</li> <li>Unidimensionais: Requisitos que, quanto mais presentes, mais satisfa\u00e7\u00e3o geram.</li> <li>Atraentes: Requisitos que surpreendem e encantam o cliente.</li> <li>Indiferentes: Requisitos que n\u00e3o geram nem satisfa\u00e7\u00e3o nem insatisfa\u00e7\u00e3o.</li> <li>Reversos: Requisitos que, quanto mais presentes, mais insatisfa\u00e7\u00e3o geram.</li> </ul> </li> <li>Matriz de Prioriza\u00e7\u00e3o: Atribui pesos aos crit\u00e9rios de prioriza\u00e7\u00e3o e calcula uma pontua\u00e7\u00e3o para cada requisito, permitindo orden\u00e1-los por ordem de import\u00e2ncia.</li> </ul> <p>A escolha da t\u00e9cnica de prioriza\u00e7\u00e3o depender\u00e1 do contexto do projeto, dos crit\u00e9rios de prioriza\u00e7\u00e3o definidos e das prefer\u00eancias da equipe de desenvolvimento. \u00c9 importante envolver os stakeholders nesse processo para garantir que as prioridades estejam alinhadas com as necessidades do neg\u00f3cio e dos usu\u00e1rios.</p>"},{"location":"1_analise_requisitos_viabilidade/#4-ferramentas-e-modelos-para-backend","title":"4. Ferramentas e Modelos para Backend","text":"<p>A An\u00e1lise de Requisitos em Backend se beneficia de uma variedade de ferramentas e modelos que auxiliam na organiza\u00e7\u00e3o, visualiza\u00e7\u00e3o e comunica\u00e7\u00e3o dos requisitos, al\u00e9m de facilitar o processo de desenvolvimento e manuten\u00e7\u00e3o do sistema.</p>"},{"location":"1_analise_requisitos_viabilidade/#ferramentas-para-backend","title":"Ferramentas para Backend","text":"<ul> <li>Ferramentas de gerenciamento de projetos:<ul> <li>Jira: Permite o acompanhamento de tarefas, bugs e issues, facilitando a organiza\u00e7\u00e3o e o planejamento do desenvolvimento.</li> <li>Trello: Oferece um quadro visual para organizar tarefas e acompanhar o progresso do projeto.</li> <li>Asana: Permite a cria\u00e7\u00e3o de projetos, tarefas e subtarefas, al\u00e9m de facilitar a colabora\u00e7\u00e3o entre equipes.</li> </ul> </li> <li>Ferramentas de documenta\u00e7\u00e3o:<ul> <li>Confluence: Plataforma colaborativa para criar, compartilhar e organizar documentos, como especifica\u00e7\u00f5es de requisitos, diagramas e manuais.</li> <li>Swagger: Ferramenta para documentar APIs REST, facilitando a compreens\u00e3o e o uso da interface do sistema por outros desenvolvedores.</li> </ul> </li> <li>Ferramentas de modelagem de dados:<ul> <li>MySQL Workbench: Ambiente visual para projetar, modelar e gerenciar bancos de dados MySQL.</li> <li>DBeaver: Ferramenta universal para gerenciar e explorar diversos tipos de bancos de dados.</li> <li>ER Studio: Software para modelagem de dados que permite criar diagramas entidade-relacionamento (ER) e gerar scripts SQL.</li> </ul> </li> <li>Ferramentas de teste:<ul> <li>Postman: Ferramenta para testar APIs REST, enviando requisi\u00e7\u00f5es e analisando as respostas.</li> <li>JMeter: Ferramenta para realizar testes de carga e desempenho em aplica\u00e7\u00f5es web e APIs.</li> <li>SoapUI: Ferramenta para testar APIs SOAP, permitindo criar e executar testes funcionais e de seguran\u00e7a.</li> </ul> </li> </ul>"},{"location":"1_analise_requisitos_viabilidade/#modelos-para-backend","title":"Modelos para Backend","text":"<ul> <li>Diagramas de Caso de Uso (UML): Representam as intera\u00e7\u00f5es entre os atores (usu\u00e1rios, sistemas externos) e o sistema para alcan\u00e7ar um objetivo espec\u00edfico.</li> <li>Diagramas de Sequ\u00eancia (UML): Ilustram a ordem temporal das mensagens trocadas entre os objetos do sistema durante a execu\u00e7\u00e3o de um caso de uso.</li> <li>Diagramas de Classe (UML): Representam a estrutura est\u00e1tica do sistema, mostrando as classes, seus atributos e m\u00e9todos, e as rela\u00e7\u00f5es entre elas.</li> <li>Diagramas de Entidade-Relacionamento (ER): Modelam a estrutura de dados do sistema, mostrando as entidades, seus atributos e os relacionamentos entre elas.</li> <li>Diagramas de Fluxo de Dados (DFD): Representam o fluxo de dados atrav\u00e9s do sistema, mostrando os processos, os armazenamentos de dados e as entidades externas.</li> </ul> <p>A escolha das ferramentas e modelos adequados depender\u00e1 das necessidades e prefer\u00eancias da equipe de desenvolvimento, bem como das caracter\u00edsticas do projeto. A utiliza\u00e7\u00e3o dessas ferramentas e modelos pode agilizar o processo de desenvolvimento, facilitar a comunica\u00e7\u00e3o entre os membros da equipe e garantir a qualidade do produto final.</p>"},{"location":"1_analise_requisitos_viabilidade/#desafio-final-analise-de-requisitos-para-um-modulo-backend","title":"Desafio Final: An\u00e1lise de Requisitos para um M\u00f3dulo Backend","text":"<p>Cen\u00e1rio:</p> <p>Voc\u00ea faz parte da equipe de desenvolvimento de um novo sistema web. Sua tarefa \u00e9 realizar a An\u00e1lise de Requisitos para um m\u00f3dulo backend espec\u00edfico.</p> <p>Tarefas:</p> <ol> <li>Escolha do M\u00f3dulo: Selecione um m\u00f3dulo backend do sistema (ex: autentica\u00e7\u00e3o de usu\u00e1rios, gerenciamento de produtos, processamento de pagamentos).</li> <li>Elicita\u00e7\u00e3o de Requisitos: Entreviste usu\u00e1rios, stakeholders e especialistas de dom\u00ednio para coletar requisitos funcionais, n\u00e3o funcionais, regras de neg\u00f3cio, requisitos de usu\u00e1rio e requisitos de sistema para o m\u00f3dulo escolhido.</li> <li>Documenta\u00e7\u00e3o de Requisitos: Documente os requisitos elicitados de forma clara e organizada, utilizando casos de uso, hist\u00f3rias de usu\u00e1rio, diagramas de sequ\u00eancia, diagramas de classe ou outros modelos adequados. Classifique os requisitos em suas respectivas categorias.</li> <li>An\u00e1lise de Viabilidade: Avalie a viabilidade t\u00e9cnica e de design dos requisitos, considerando as tecnologias dispon\u00edveis (linguagens de programa\u00e7\u00e3o, frameworks, bancos de dados), as restri\u00e7\u00f5es de infraestrutura e os padr\u00f5es de projeto aplic\u00e1veis.</li> <li>Prioriza\u00e7\u00e3o de Requisitos: Priorize os requisitos de acordo com sua import\u00e2ncia para o projeto, utilizando t\u00e9cnicas como MoSCoW, Kano ou matriz de prioriza\u00e7\u00e3o, levando em considera\u00e7\u00e3o o valor de neg\u00f3cio, a urg\u00eancia, o risco e o custo de cada requisito.</li> </ol> <p>Entrega:</p> <p>Crie um reposit\u00f3rio no GitHub para o projeto e adicione um arquivo README.md com a documenta\u00e7\u00e3o completa da An\u00e1lise de Requisitos. Inclua:</p> <ul> <li>Descri\u00e7\u00e3o detalhada do m\u00f3dulo backend escolhido.</li> <li>Lista completa dos requisitos elicitados, classificados por tipo (funcional, n\u00e3o funcional, regras de neg\u00f3cio, requisitos de usu\u00e1rio, requisitos de sistema).</li> <li>An\u00e1lise de viabilidade t\u00e9cnica e de design, incluindo justificativas para as escolhas tecnol\u00f3gicas e de arquitetura.</li> <li>Prioriza\u00e7\u00e3o dos requisitos, com explica\u00e7\u00e3o dos crit\u00e9rios utilizados e da ordem de import\u00e2ncia estabelecida.</li> <li>Diagramas ou modelos que auxiliem na compreens\u00e3o dos requisitos e do funcionamento do m\u00f3dulo (opcional).</li> </ul> <p>Avalia\u00e7\u00e3o:</p> <p>Sua entrega ser\u00e1 avaliada individualmente, considerando:</p> <ul> <li>A qualidade e completude da elicita\u00e7\u00e3o e documenta\u00e7\u00e3o dos requisitos.</li> <li>A profundidade e a pertin\u00eancia da an\u00e1lise de viabilidade.</li> <li>A coer\u00eancia e a justificativa da prioriza\u00e7\u00e3o dos requisitos.</li> <li>A clareza e a organiza\u00e7\u00e3o da documenta\u00e7\u00e3o.</li> <li>O uso adequado de ferramentas e modelos para representar os requisitos.</li> </ul> <p>Este desafio pr\u00e1tico permitir\u00e1 que voc\u00ea aplique os conceitos e t\u00e9cnicas aprendidos em um cen\u00e1rio real de desenvolvimento backend, preparando voc\u00ea para os desafios do mercado de trabalho.</p>"},{"location":"2_gitflow_conventional_commits/","title":"GitFlow e Conventional Commits","text":"Boas Pr\u00e1ticas de Desenvolvimento e Documenta\u00e7\u00e3o <p> GitFlow \u00e9 um modelo de ramifica\u00e7\u00e3o que ajuda a organizar o desenvolvimento de software em diferentes fluxos de trabalho. Ele define branches espec\u00edficos para desenvolvimento, lan\u00e7amento de vers\u00f5es e corre\u00e7\u00f5es de bugs, facilitando a colabora\u00e7\u00e3o em equipe e a manuten\u00e7\u00e3o do projeto. </p> <p> Conventional Commits \u00e9 uma conven\u00e7\u00e3o para padronizar as mensagens de commit, tornando-as mais informativas e \u00fateis. As mensagens seguem um formato espec\u00edfico, indicando o tipo de altera\u00e7\u00e3o (feat, fix, chore, etc.) e uma breve descri\u00e7\u00e3o. Isso facilita a compreens\u00e3o do hist\u00f3rico do projeto e a gera\u00e7\u00e3o de changelogs autom\u00e1ticos. </p> <p> Utilizar GitFlow e Conventional Commits em conjunto com o Tailwind CSS garante um desenvolvimento mais organizado, eficiente e f\u00e1cil de acompanhar, al\u00e9m de melhorar a qualidade da documenta\u00e7\u00e3o do projeto. </p> Cria\u00e7\u00e3o do Reposit\u00f3rio Individual <ol> <li>Acesse sua conta no GitHub.</li> <li>Clique no bot\u00e3o \"+\" no canto superior direito e selecione \"New repository\".</li> <li>D\u00ea um nome descritivo ao reposit\u00f3rio (ex: \"meu-projeto-backend\").</li> <li>Escolha a visibilidade do reposit\u00f3rio (p\u00fablico ou privado).</li> <li>Clique em \"Create repository\".</li> </ol> <p> Ap\u00f3s criar o reposit\u00f3rio, siga as instru\u00e7\u00f5es do GitHub para clonar o reposit\u00f3rio em sua m\u00e1quina local e come\u00e7ar a trabalhar no seu projeto. Lembre-se de utilizar GitFlow e Conventional Commits para manter o hist\u00f3rico do projeto organizado e facilitar a colabora\u00e7\u00e3o com outros desenvolvedores. </p> <p></p> <p></p>"},{"location":"3_virtualizacao_node_docker/","title":"Virtualiza\u00e7\u00e3o, Node e Docker","text":""},{"location":"3_virtualizacao_node_docker/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Cria\u00e7\u00e3o de banco de dados Postgres com Docker Compose</li> <li>Ambiente Node</li> </ul>"},{"location":"4_modelagem_bd_models/","title":"Modelagem de Banco de Dados e Models","text":""},{"location":"4_modelagem_bd_models/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Arquiteturas de Software em MVC e Padr\u00f5es de Projeto</li> </ul>"},{"location":"5_rotas_controllers/","title":"Rotas e Controllers","text":""},{"location":"5_rotas_controllers/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Continua\u00e7\u00e3o do MVC</li> </ul>"},{"location":"6_atividade_avaliativa_individual/","title":"Atividade Avaliativa Individual","text":""},{"location":"6_atividade_avaliativa_individual/#topicos","title":"T\u00f3picos:","text":"<ul> <li>An\u00e1lise de conventional commits e boas pr\u00e1ticas (0,5 ponto)</li> </ul>"},{"location":"7_queries_sql_avancadas/","title":"Queries SQLs Avan\u00e7adas em Banco de Dados","text":""},{"location":"8_helpers_camadas_auxiliares_mvc/","title":"Helpers e Camadas Auxiliares do MVC","text":""},{"location":"9_avaliacao_multidisciplinar/","title":"Avalia\u00e7\u00e3o Multidisciplinar","text":""},{"location":"9_avaliacao_multidisciplinar/#topicos","title":"T\u00f3picos:","text":"<ul> <li>Teste desafio pr\u00e1tico de Docker e Filas (2,5 pontos)</li> </ul>"},{"location":"tutorial_mvc/","title":"Tutorial MVC com Typescript","text":""},{"location":"tutorial_mvc/#1-configuracao-do-ambiente","title":"1. Configura\u00e7\u00e3o do Ambiente","text":"<ol> <li> <p>Instale o Node.js e npm: Certifique-se de ter o Node.js e o npm instalados no seu sistema. Voc\u00ea pode baix\u00e1-los aqui.</p> </li> <li> <p>Crie um novo projeto: Abra o terminal e crie uma nova pasta para o seu projeto.</p> </li> </ol> <pre><code>mkdir meu-projeto-mvc\ncd meu-projeto-mvc\nnpm init -y\n</code></pre> <ol> <li>Instale as depend\u00eancias necess\u00e1rias:</li> </ol> <pre><code>npm install express typescript ts-node @types/node @types/express\n</code></pre> <ol> <li>Configure o TypeScript: Crie um arquivo <code>tsconfig.json</code> na raiz do projeto com o seguinte conte\u00fado:</li> </ol> <pre><code>{\n    \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"outDir\": \"./dist\"\n    },\n    \"include\": [\"src/**/*\"],\n    \"exclude\": [\"node_modules\"]\n}\n</code></pre>"},{"location":"tutorial_mvc/#2-estrutura-do-projeto","title":"2. Estrutura do Projeto","text":"<p>Crie a seguinte estrutura de pastas e arquivos no seu projeto:</p> <pre><code>meu-projeto-mvc/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2514\u2500\u2500 userController.ts\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u2514\u2500\u2500 userModel.ts\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2514\u2500\u2500 userRoutes.ts\n\u2502   \u251c\u2500\u2500 views/\n\u2502   \u2502   \u2514\u2500\u2500 userView.ts\n\u2502   \u251c\u2500\u2500 app.ts\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 package.json\n</code></pre>"},{"location":"tutorial_mvc/#3-implementacao","title":"3. Implementa\u00e7\u00e3o","text":""},{"location":"tutorial_mvc/#srcappts","title":"<code>src/app.ts</code>","text":"<p>Este \u00e9 o ponto de entrada do seu aplicativo.</p> <pre><code>import express from 'express';\nimport userRoutes from './routes/userRoutes';\n\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\napp.use('/users', userRoutes);\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n</code></pre>"},{"location":"tutorial_mvc/#srcmodelsusermodelts","title":"<code>src/models/userModel.ts</code>","text":"<p>Aqui voc\u00ea define a estrutura dos dados.</p> <pre><code>export interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nexport const users: User[] = [];\n</code></pre>"},{"location":"tutorial_mvc/#srccontrollersusercontrollerts","title":"<code>src/controllers/userController.ts</code>","text":"<p>Aqui voc\u00ea implementa a l\u00f3gica de neg\u00f3cios.</p> <pre><code>import { Request, Response } from 'express';\nimport { users, User } from '../models/userModel';\n\nexport const getUsers = (req: Request, res: Response): void =&gt; {\n  res.json(users);\n};\n\nexport const createUser = (req: Request, res: Response): void =&gt; {\n  const newUser: User = {\n    id: users.length + 1,\n    ...req.body\n  };\n  users.push(newUser);\n  res.status(201).json(newUser);\n};\n</code></pre>"},{"location":"tutorial_mvc/#srcroutesuserroutests","title":"<code>src/routes/userRoutes.ts</code>","text":"<p>Aqui voc\u00ea define as rotas do seu aplicativo.</p> <pre><code>import { Router } from 'express';\nimport { getUsers, createUser } from '../controllers/userController';\n\nconst router = Router();\n\nrouter.get('/', getUsers);\nrouter.post('/', createUser);\n\nexport default router;\n</code></pre>"},{"location":"tutorial_mvc/#srcviewsuserviewts","title":"<code>src/views/userView.ts</code>","text":"<p>Neste exemplo simples, a camada de visualiza\u00e7\u00e3o pode ser omitida ou usada para formatar a sa\u00edda de dados. Em um ambiente mais complexo, voc\u00ea pode usar templates.</p>"},{"location":"tutorial_mvc/#4-executando-o-projeto","title":"4. Executando o Projeto","text":"<p>Para rodar seu projeto, adicione um script no <code>package.json</code>:</p> <pre><code>\"scripts\": {\n  \"start\": \"ts-node src/app.ts\"\n}\n</code></pre> <p>Ent\u00e3o, no terminal, execute:</p> <pre><code>npm start\n</code></pre>"},{"location":"tutorial_mvc/#5-testando-com-o-restclient-no-vscode","title":"5. Testando com o RestClient no VSCode","text":"<p>Para testar sua API, voc\u00ea pode usar a extens\u00e3o RestClient no VSCode. Crie um arquivo <code>requests.http</code> na raiz do projeto com o seguinte conte\u00fado:</p> <pre><code>### Get all users\nGET http://localhost:3000/users\nContent-Type: application/json\n\n###\n\n### Create a new user\nPOST http://localhost:3000/users\nContent-Type: application/json\n\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n</code></pre> <p>Para realizar os testes, basta abrir o arquivo <code>requests.http</code> no VSCode e clicar no bot\u00e3o \"Send Request\" que aparece acima de cada bloco de requisi\u00e7\u00e3o.</p>"},{"location":"tutorial_mvc/#6-adicionando-um-gitignore","title":"6. Adicionando um .gitignore","text":"<p>Crie um arquivo <code>.gitignore</code> na raiz do projeto com o seguinte conte\u00fado para ignorar arquivos e pastas desnecess\u00e1rias:</p> <pre><code># Node modules\nnode_modules/\n\n# TypeScript output\ndist/\n\n# Environment variables\n.env\n\n# Logs\nlogs/\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Editor directories and files\n.vscode/\n.idea/\n.DS_Store\n</code></pre>"}]}